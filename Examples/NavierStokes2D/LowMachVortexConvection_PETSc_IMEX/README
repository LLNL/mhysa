2D NAVIER-STOKES EQUATIONS FOR COMPRESSIBLE FLOWS

  d   [ rho   ]   d   [   rho*u    ]    d  [   rho*v   ]
  --  [ rho*u ] + --  [rho*u*u + p ] +  -- [  rho*u*v  ] =  Viscous + Gravity terms
  dt  [ rho*v ]   dx  [   rho*u*v  ]    dy [rho*v*v + p]
      [   e   ]       [   (e+p)*u  ]       [  (e+p)v   ]

  rho   - density
  u     - x-velocity
  v     - y-velocity
  p     - pressure
  e     - internal energy

  Equation of state:
           p         1
    e = -------  +   - rho * (u^2+v^2)
        gamma-1      2


Low Mach Inviscid, Isentropic Vortex Convection:

  Convection of an inviscid, isentropic vortex 
  that is the exact solution of the Euler equations
  (Navier-Stokes without the viscosity) at a low
  Mach number

Domain:

  0 <= x,y <= 10.0
  "periodic" boundary conditions

Initial Solution:

  Freestream conditions -
  
    rho = 1.0
    p   = 1.0/gamma
    u   = 0.1
    v   = 0.0

  Vortex centered at x0 = 5.0, y0 = 5.0 - 

                (gamma-1)*b^2                   1     
    rho = ( 1 - ------------- exp(1-r^2) ) ^ (-------)   
                8*gamma*pi^2                  gamma-1 

    p   = rho^gamma

             b        1-r^2
    du  = - --- exp [ ----- ] + (y-y0)^2
            2pi         2

             b        1-r^2
    dv  =   --- exp [ ----- ] + (x-x0)^2
            2pi         2

The following input files are required:
+ solver.inp    -   General solver parameters
+ boundary.inp  -   Boundary conditions
+ physics.inp   -   Physical parameters
+ .petscrc      -   Input file for PETSc time-integration
                    (if not present, then solver will use
                    native time-integration)

** See hypar/README for other (optional) input files

Due to file sizes, the required file initial.inp for 
initial solution are not provided. It can be generated 
by compiling aux/init.c running the executable in the 
run directory (where solver.inp is present).
Similarly, the exact solution (exact.inp) can be generated
by compiling and running aux/exact.c.

Notes:-
The code aux/init.c is an example to generate the initial
solution file in the correct format required by the solver. 
The exact solution file also needs to be in the same format.
